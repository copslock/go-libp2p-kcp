// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/paralin/go-libp2p-kcp/examples/echo/echosvc/echosvc.proto

/*
Package echosvc is a generated protocol buffer package.

It is generated from these files:
	github.com/paralin/go-libp2p-kcp/examples/echo/echosvc/echosvc.proto

It has these top-level messages:
	EchoRequest
	EchoReply
*/
package echosvc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// EchoRequest is the argument to the Echo call.
type EchoRequest struct {
	// Message is the message to echo.
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *EchoRequest) Reset()                    { *m = EchoRequest{} }
func (m *EchoRequest) String() string            { return proto.CompactTextString(m) }
func (*EchoRequest) ProtoMessage()               {}
func (*EchoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EchoRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type EchoReply struct {
	// Message is the message that was requested, echo'd back.
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	// PeerId is the peer that responded.
	PeerId string `protobuf:"bytes,2,opt,name=peer_id,json=peerId" json:"peer_id,omitempty"`
}

func (m *EchoReply) Reset()                    { *m = EchoReply{} }
func (m *EchoReply) String() string            { return proto.CompactTextString(m) }
func (*EchoReply) ProtoMessage()               {}
func (*EchoReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EchoReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *EchoReply) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func init() {
	proto.RegisterType((*EchoRequest)(nil), "echosvc.EchoRequest")
	proto.RegisterType((*EchoReply)(nil), "echosvc.EchoReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EchoService service

type EchoServiceClient interface {
	// Echo asks a node to respond with a message.
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoReply, error)
}

type echoServiceClient struct {
	cc *grpc.ClientConn
}

func NewEchoServiceClient(cc *grpc.ClientConn) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoReply, error) {
	out := new(EchoReply)
	err := grpc.Invoke(ctx, "/echosvc.EchoService/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EchoService service

type EchoServiceServer interface {
	// Echo asks a node to respond with a message.
	Echo(context.Context, *EchoRequest) (*EchoReply, error)
}

func RegisterEchoServiceServer(s *grpc.Server, srv EchoServiceServer) {
	s.RegisterService(&_EchoService_serviceDesc, srv)
}

func _EchoService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echosvc.EchoService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EchoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "echosvc.EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _EchoService_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/paralin/go-libp2p-kcp/examples/echo/echosvc/echosvc.proto",
}

func init() {
	proto.RegisterFile("github.com/paralin/go-libp2p-kcp/examples/echo/echosvc/echosvc.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x72, 0x49, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x2f, 0x48, 0x2c, 0x4a, 0xcc, 0xc9, 0xcc, 0xd3, 0x4f,
	0xcf, 0xd7, 0xcd, 0xc9, 0x4c, 0x2a, 0x30, 0x2a, 0xd0, 0xcd, 0x4e, 0x2e, 0xd0, 0x4f, 0xad, 0x48,
	0xcc, 0x2d, 0xc8, 0x49, 0x2d, 0xd6, 0x4f, 0x4d, 0xce, 0xc8, 0x07, 0x13, 0xc5, 0x65, 0xc9, 0x30,
	0x5a, 0xaf, 0xa0, 0x28, 0xbf, 0x24, 0x5f, 0x88, 0x1d, 0xca, 0x55, 0x52, 0xe7, 0xe2, 0x76, 0x4d,
	0xce, 0xc8, 0x0f, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe0, 0x62, 0xcf, 0x4d, 0x2d,
	0x2e, 0x4e, 0x4c, 0x4f, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x71, 0x95, 0xec, 0xb8,
	0x38, 0x21, 0x0a, 0x0b, 0x72, 0x2a, 0x71, 0x2b, 0x13, 0x12, 0xe7, 0x62, 0x2f, 0x48, 0x4d, 0x2d,
	0x8a, 0xcf, 0x4c, 0x91, 0x60, 0x02, 0xcb, 0xb0, 0x81, 0xb8, 0x9e, 0x29, 0x46, 0x8e, 0x10, 0x8b,
	0x82, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0x8c, 0xb8, 0x58, 0x40, 0x5c, 0x21, 0x11, 0x3d,
	0x98, 0xc3, 0x90, 0x9c, 0x21, 0x25, 0x84, 0x26, 0x5a, 0x90, 0x53, 0xa9, 0xc4, 0x90, 0xc4, 0x06,
	0x76, 0xbb, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x39, 0x3d, 0x68, 0x63, 0x03, 0x01, 0x00, 0x00,
}
